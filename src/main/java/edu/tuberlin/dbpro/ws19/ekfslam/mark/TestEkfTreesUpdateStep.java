package edu.tuberlin.dbpro.ws19.ekfslam.mark;

import edu.tuberlin.dbpro.ws19.ekfslam.util.TreeProcessing;
import org.apache.flink.api.java.tuple.Tuple3;

public class TestEkfTreesUpdateStep{
    private static Double[] fitTreeData(Double[] input) {
        Double[] adjust15 = input;
        for (int i = 0; i < 15; i++) {
            adjust15[i] = 81.00;
        }
        return adjust15;
    }
    private static Double[] validTreesOnly(Double[] input){
        Double[] valid = input;
        for (int i = 0; i < valid.length; i++) {
            if (valid[i] <= 80.00){
                continue;
            }else{
                valid[i] = 0.0;
            }
        }
        return valid;
    }
    public static Double[] parseRawTrees(Double[] input){
        return validTreesOnly(fitTreeData(input));
    }
    public static void main(String[] args) {
        Double[] input = {0.83, 0.84, 0.84, 0.85, 0.84, 0.84, 0.85, 0.85, 0.86, 0.86, 0.86, 0.89, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.87, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.87, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.87, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 20.28, 20.29, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 29.47, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.87, 81.91, 8.7, 8.53, 8.53, 8.55, 81.91, 81.91, 81.83, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.83, 81.87, 81.91, 81.87, 28.56, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 12.69, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 23.72, 23.8, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 24.29, 24.16, 24.18, 24.24, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 12.57, 12.46, 12.47, 12.51, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 3.11, 3.08, 3.09, 3.13, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.87, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91, 81.91};
        for (Tuple3 t : TreeProcessing.singleTrees(input, 0.0)) {
            System.out.println(t);
        }
    }
}
